-- Task1
CREATE TABLE actors (
    actors_id INTEGER PRIMARY KEY,
    name TEXT,
    surname TEXT,
    age INTEGER,
    sex TEXT
);

CREATE TABLE directors (
    director_id INTEGER PRIMARY KEY,
    name TEXT,
    surname TEXT,
    age INTEGER,
    sex TEXT
);

CREATE TABLE movies (
    movie_id INTEGER PRIMARY KEY,
    name_movie TEXT,
    release INTEGER,
    budjet INTEGER,
    director_id INTEGER,
    FOREIGN KEY (director_id) REFERENCES directors(director_id) ON DELETE SET NULL
);

CREATE TABLE actors_movies (
    actors_movies_id INTEGER PRIMARY KEY,
    movies_id INTEGER,
    actors_id INTEGER,
    FOREIGN KEY (movies_id) REFERENCES movies(movie_id) ON DELETE CASCADE,
    FOREIGN KEY (actors_id) REFERENCES actors(actors_id) ON DELETE CASCADE
);

CREATE TABLE bank_accounts (
    bank_account_id INTEGER PRIMARY KEY,
    director_id INTEGER,
    actors_id INTEGER,
    account_number INTEGER,
    FOREIGN KEY (director_id) REFERENCES directors(director_id) ON DELETE SET NULL,
    FOREIGN KEY (actors_id) REFERENCES actors(actors_id) ON DELETE SET NULL
);

INSERT INTO actors (actors_id, name, surname, age, sex) VALUES
(1, 'Arnold', 'Schwarzenegger', 75, 'm'),
(2, 'Bruce', 'Willis', 67, 'm'),
(3, 'Tom', 'Cruise', 60, 'm'),
(4, 'Brad', 'Pitt', 53, 'm'),
(5, 'Will', 'Smith', 54, 'm'),
(6, 'Leonardo', 'DiCaprio', 48, 'm'),
(7, 'Tom', 'Hanks', 66, 'm'),
(8, 'Johnny', 'Depp', 59, 'm'),
(9, 'Harrison', 'Ford', 80, 'm'),
(10, 'Sandra', 'Bullock', 58, 'f'),
(11, 'Halle', 'Berry', 56, 'f'),
(12, 'Julia', 'Roberts', 55, 'f'),
(13, 'Kate', 'Winslet', 47, 'f'),
(14, 'Angelina', 'Jolie', 47, 'f');

INSERT INTO directors (director_id, name, surname, age, sex) VALUES
(1, 'James', 'Cameron', 68, 'm'),
(2, 'Steven', 'Spilberg', 75, 'm'),
(3, 'Robert', 'Zemeckis', 70, 'm'),
(4, 'Doug', 'Liman', 57, 'm'),
(5, 'Brian', 'De Palma', 82, 'm'),
(6, 'John', 'Woo', 76, 'm'),
(7, 'Tim', 'Berton', 64, 'm'),
(8, 'Jan', 'De Bont', 79, 'm'),
(9, 'Alejandro', 'Agresti', 61, 'm'),
(10, 'Garry', 'Marshal', 82, 'm'),
(11, 'Steven', 'Sodeberg', 59, 'm'),
(12, 'Michael', 'Bay', 57, 'm'),
(13, 'Barry', 'Sonnenfeld', 69, 'm'),
(14, 'Simon', 'Kinberg', 49, 'm'),
(15, 'Christopher', 'Nolan', 52, 'm'),
(16, 'Martin', 'Scorsese', 80, 'm'),
(17, 'Stanley', 'Kubrick', 70, 'm'),
(18, 'Woody', 'Allen', 87, 'm');

INSERT INTO movies (movie_id, name_movie, release, budjet, director_id) VALUES
(1, 'Titanic', 1997, 200000000, 1),
(2, 'Catch me if you can', 2002, 52000000, 2),
(3, 'Forrest Gump', 1994, 55000000, 3),
(4, 'Terminator 2', 1991, 102000000, 1),
(5, 'Mr. & Mrs. Smith', 2005, 110000000, 4),
(6, 'Indiana Jones 3', 1989, 48000000, 2),
(7, 'Mission impossible 1', 1996, 80000000, 5),
(8, 'Mission impossible 2', 2000, 125000000, 6),
(9, 'Charlie and the Chocolate Factory', 2005, 150000000, 7),
(10, 'Speed', 1994, 25000000, 8),
(11, 'Lake House', 2006, 40000000, 9),
(12, 'Pretty women', 1990, 190000000, 10),
(13, 'Ocean’s eleven', 2001, 184000000, 11),
(14, 'Larry Crowne', 2011, 30000000, NULL),
(15, 'Bad boys 1', 1995, 19000000, 12),
(16, 'Bad boys 2', 2003, 130000000, 12),
(17, 'Men in black', 1997, 90000000, 13),
(18, 'The Martian', 2015, 108000000, 14),
(19, 'Interstellar', 2014, 165000000, 15);

INSERT INTO actors_movies (actors_movies_id, movies_id, actors_id) VALUES
(1, 1, 6),
(2, 1, 13),
(3, 2, 6),
(4, 2, 7),
(5, 3, 7),
(6, 4, 1),
(7, 5, 4),
(8, 5, 14),
(9, 6, 9),
(10, 7, 3),
(11, 8, 3),
(12, 9, 8),
(13, 10, 10),
(14, 11, 10),
(15, 12, 12),
(16, 13, 4),
(17, 13, 12),
(18, 14, 7),
(19, 14, 12),
(20, 15, 5),
(21, 16, 5),
(22, 17, 5),
(23, 18, NULL),
(24, 19, NULL);

INSERT INTO bank_accounts (bank_account_id, director_id, actors_id, account_number) VALUES
(1, NULL, 1, 1264567),
(2, NULL, 2, 1296567),
(3, NULL, 3, 1234567),
(4, NULL, 4, 1294167),
(5, NULL, 5, 1594567),
(6, NULL, 6, 1794567),
(7, NULL, 7, 1994567),
(8, NULL, 8, 2294567),
(9, NULL, 9, 1294567),
(10, NULL, 10, 2297667),
(11, NULL, 11, 3994567),
(12, NULL, 12, 4294567),
(13, NULL, 13, 5294567),
(14, NULL, 14, 6294567),
(15, 1, NULL, 7294567),
(16, 2, NULL, 8294567),
(17, 3, NULL, 9294567),
(18, 4, NULL, 1294561),
(19, 5, NULL, 1294562),
(20, 6, NULL, 1294563),
(21, 7, NULL, 1294564),
(22, 8, NULL, 1294565),
(23, 9, NULL, 1294566),
(24, 10, NULL, 1294567),
(25, 11, NULL, 1294568),
(26, 12, NULL, 1294569),
(27, 13, NULL, 1294521),
(28, 14, NULL, 1294537),
(29, 15, NULL, 1294547),
(30, 16, NULL, 1294557),
(31, 17, NULL, 1294557),
(32, 18, NULL, 1294577);

-- Task2
ALTER TABLE bank_accounts ADD COLUMN finance INTEGER;

-- Task3
SELECT DISTINCT directors.name, directors.surname, movies.name_movie, movies.budjet
FROM directors
JOIN movies ON directors.director_id = movies.director_id
ORDER BY movies.budjet DESC
LIMIT 10;

-- Task4
SELECT actors.name, actors.surname
FROM actors
LEFT JOIN actors_movies ON actors.actors_id = actors_movies.actors_id
WHERE actors_movies.movies_id IS NULL
UNION
SELECT directors.name, directors.surname
FROM directors
LEFT JOIN movies ON directors.director_id = movies.director_id
WHERE movies.movie_id IS NULL;

-- Task5
SELECT movies.name_movie, actors.name, actors.surname
FROM movies
JOIN actors_movies ON movies.movie_id = actors_movies.movies_id
JOIN actors ON actors_movies.actors_id = actors.actors_id
WHERE movies.budjet > 150000000;

-- Task6
SELECT DISTINCT directors.name, directors.surname
FROM directors
JOIN movies ON directors.director_id = movies.director_id
WHERE movies.release < 2000;

-- Task7
UPDATE movies SET director_id = 16 WHERE movies.movie_id = 14;
UPDATE actors_movies SET actors_id = 2 WHERE actors_movies_id = 23;
UPDATE actors_movies SET actors_id = 11 WHERE actors_movies_id = 24;

-- Task8
ALTER TABLE movies ADD COLUMN rating REAL;

UPDATE movies SET rating = CASE
    WHEN movie_id = 1 THEN 7.8
    WHEN movie_id = 2 THEN 7.9
    WHEN movie_id = 3 THEN 9.2
    WHEN movie_id = 4 THEN 8.2
    WHEN movie_id = 5 THEN 6.5
    WHEN movie_id = 6 THEN 7.1
    WHEN movie_id = 7 THEN 7.2
    WHEN movie_id = 8 THEN 5.4
    WHEN movie_id = 9 THEN 9.1
    WHEN movie_id = 10 THEN 3.2
    WHEN movie_id = 11 THEN 4.3
    WHEN movie_id = 12 THEN 5.9
    WHEN movie_id = 13 THEN 7.8
    WHEN movie_id = 14 THEN 9.5
    WHEN movie_id = 15 THEN 3.2
    WHEN movie_id = 16 THEN 4.3
    WHEN movie_id = 17 THEN 5.9
    WHEN movie_id = 18 THEN 7.8
    WHEN movie_id = 19 THEN 9.5
END;

-- Task9
SELECT directors.name, directors.surname, movies.name_movie, movies.rating
FROM directors
JOIN movies ON directors.director_id = movies.director_id
WHERE movies.rating < (SELECT AVG(rating) FROM movies) AND movies.release < 2000;

-- Task10
-- Не решил :(